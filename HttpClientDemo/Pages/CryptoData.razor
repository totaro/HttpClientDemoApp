@page "/crypto"


@inject IHttpClientFactory _clientFactory



<h3>Crypto Data : Bitcoin : Current</h3>
@if (string.IsNullOrWhiteSpace(errorString) == false)
{
	<div class="h2">@errorString</div>
}
else if(crypto is null)
{
	<div class="h4">Loading...</div>
}
else
{

	DateTime today = DateTime.Now;
	@today;

	<table class="table table-striped">
		
		<thead class="thead-dark">
			<tr>
				<th>Currency</th>
				<th>Volume</th>
				<th>Change</th>
				
			</tr>
		</thead>
		<tbody>

			


			
			<tr>
				
				<td><b>Euro:</b> @crypto.bitcoin.eur</td>
				<td>@crypto.bitcoin.eur_24h_vol</td>
				<td>@crypto.bitcoin.eur_24h_change</td>
				
				
			</tr>

			<tr>
				
				<td><b>USD:</b> @crypto.bitcoin.usd</td>
				<td>@crypto.bitcoin.usd_24h_vol</td>
				<td>@crypto.bitcoin.usd_24h_change</td>
				
				
			</tr>

			<tr>
				
				<td><b>GBP:</b> @crypto.bitcoin.gbp</td>
				<td>@crypto.bitcoin.gbp_24h_vol</td>
				<td>@crypto.bitcoin.gbp_24h_change</td>
				
				
			</tr>

			<tr>
				
				<td><b>JPY:</b> @crypto.bitcoin.jpy</td>
				<td>@crypto.bitcoin.jpy_24h_vol</td>
				<td>@crypto.bitcoin.jpy_24h_change</td>
				
				
			</tr>

			@*}*@
		</tbody>

	</table>
}

@code {
	

	
	CryptoCurrentModel? crypto;
	string errorString;

	
	
	protected override async Task OnInitializedAsync()
	{

		
		var request = new HttpRequestMessage(HttpMethod.Get,
			"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=eur%2Cgbp%2Cusd%2Cjpy&include_market_cap=true&include_24hr_vol=true&include_24hr_change=true&include_last_updated_at=true");

		var client = _clientFactory.CreateClient();

		HttpResponseMessage response = await client.SendAsync(request);

		if (response.IsSuccessStatusCode)
		{
			crypto = await response.Content.ReadFromJsonAsync<CryptoCurrentModel>();
			errorString = null;
		}
		else
		{
			errorString = $"There was an error to get forecast response:  {response.ReasonPhrase}";
		}

		
	}

}
